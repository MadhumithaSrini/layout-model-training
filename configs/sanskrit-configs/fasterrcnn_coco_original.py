# -*- coding: utf-8 -*-
"""faster_RCNN_finetuned_COCO_config.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kFWNxuXuZkTaS4ub2C--g8h4hhH-uo5t
"""

from detectron2.config import get_cfg
from detectron2 import model_zoo

#datainitializations
dataroot='./data/sanskrit'
traindata=dataroot+'/train'
testdata=dataroot+'/test'
valdata=dataroot+'/val'
trainjson=traindata+'/train.json'
testjson=testdata+'/test.json'
valjson=valdata+'/val.json'
trainimages=traindata+'/images'
testimages=testdata+'/images'
valimages=valdata+'/images'

cfg = get_cfg()
#cfg._open_cfg(config_file)
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("train_data",)
cfg.DATASETS.TEST = ("val_data",)
cfg.INPUT.MAX_SIZE_TEST = 1247
cfg.INPUT.MAX_SIZE_TRAIN = 1247
cfg.INPUT.MIN_SIZE_TEST = 743
cfg.INPUT.MIN_SIZE_TRAIN = (743,)
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")  # Let training initialize from model zoo
cfg.SOLVER.IMS_PER_BATCH = 2
#cfg.TEST.EVAL_PERIOD = 500
cfg.EARLY_STOPPING_MONITOR = 'val_loss'
cfg.EARLY_STOPPING_PATIENCE = 10
cfg.SOLVER.BASE_LR = 0.0003  # pick a good LR
cfg.SOLVER.MAX_ITER = 15000    # 300 iterations seems good enough for this toy dataset; you will need to train longer for a practical dataset
cfg.SOLVER.STEPS = []        # do not decay learning rate
cfg.MODEL.ANCHOR_GENERATOR.ASPECT_RATIOS = [[1.0,5.0,15.0]]
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 512   # faster, and good enough for this toy dataset (default: 512)
cfg.MODEL.ROI_HEADS.NMS_THRESH_TEST = 0.7
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 5  # only has one class (ballon). (see https://detectron2.readthedocs.io/tutorials/datasets.html#update-the-config-for-new-datasets)
# NOTE: this config means the number of classes, but a few popular unofficial tutorials incorrect uses num_classes+1 here.

cfg.OUTPUT_DIR= "fasterrcnn_coco_original_output"
#cfg.SOLVER.CHECKPOINT_PERIOD = 2000
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
